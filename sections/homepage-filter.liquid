{% assign results = collections.all %}
{% assign enable_filtering = true %}
<form
  id="desktopfilterform"
>
  {%- for filter in results.filters -%}
    {%- assign total_active_values = total_active_values | plus: filter.active_values.size -%}
    {% case filter.type %}
      {% when 'boolean', 'list' %}
        {% if filter.label == 'More filters' %}
          <div class="Facet">
            {% assign tag_name = filter.values %}
            {%- for value in filter.values -%}
              {% assign name = value.value | split: '__' %}
              {% if prevValue != name[0] %}
            <span>{{- name[0] }} </span>
              <select name="{{ filter.param_name | escape }}">
                <option value="" name="">Select</option>
                {%endif%}
                  <option name="{{ value.param_name }}"
                    value="{{ value.value }}" >{{ name[1] }} </option>

                  {% assign prevValue = name[0]%}
                {%- endfor -%}
              </select>
          </div>
        {% else %}
          <div class="Facet">
            <span>{{- filter.label | escape }} </span>
            <div class="wrapper">
              <select name="{{ filter.param_name | escape }}">
                <option value="" name="">Select</option>
                {%- for value in filter.values -%}
                  <option
                    name="{{ value.param_name }}"
                    value="{{ value.value }}"
                  >
                    {{- value.label | escape }} 
                  </option>
                {%- endfor -%}
              </select>
            </div>
          </div>
        {% endif %}
    {% endcase %}
  {%- endfor -%}
  <input type="submit" value="search">
</form>

{% style %}
.Facet > span{
    color: black;
    text-align: initial;
    font-family: 'chivo';
  -webkit-text-fill-color: white; /* Will override color (regardless of order) */
  -webkit-text-stroke-width: 2px;
  -webkit-text-stroke-color: red;
  font-size: 6rem;
  font-weight: 600;

  text-transform: uppercase;

}
{% endstyle %}
{% javascript %}
  const form = document.querySelector('#desktopfilterform').addEventListener('submit', (e) => {
    e.preventDefault();
    const formdata = new FormData(document.querySelector('#desktopfilterform'));
    let searchparams = '?';
    for (const [key, value] of formdata) {
      searchparams += `${key}=${value}&`;
    }
    filterableparams = searchparams.replace(' ', '+');
    window.location.href = `/collections/all${filterableparams}`;
  });
{% endjavascript %}
{% schema %}
{
  "name": "Filter",
  "tag": "section",
  "class": "section",
  "settings": [],

  "presets": [
    {
      "name": "Filter",
      "category": "home"
    }
  ]
}
{% endschema %}
