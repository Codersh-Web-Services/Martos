{% comment %} theme-check-disable: LiquidHTMLParsingError {% endcomment %}

{% assign results = collections.all %}
{% assign enable_filtering = true %}
<div
  id="desktopfilterform"
>
  <div class="Facet">
    <span> {{ section.settings.product_type_text }}</span>
    <div class="product-option-row">
      <div
        class="product-option-label"
        @click="options.product_type = !options.product_type; options.option1 = false; options.option2= false;"
        :class="{ labelActive: options.product_type }"
      >
        <span> ${selected_product_type}</span>
        <img :class="{ arrowActive: options.product_type }" src="{{'arrow.svg' | asset_url}}" alt="arrow svg">
      </div>
      <div
        name=""
        class="product-option-list"
        placeholder=""
        v-if="options.product_type"
      >
        <template v-for="item of product_type">
          <div
            class="product-option-item"
            @click="
              selected_product_type = item;
              options.product_type = false;
            "
          >
            ${item}
          </div>
        </template>
      </div>
    </div>
  </div>

  <div class="Facet">
    <div class="product-option-row">
      <div
        class="product-option-label"
        @click="options.option2 = !options.option2; options.option1 = false; options.product_type = false"
        :class="{ labelActive: options.option2 }"
      >
        <span> ${options.option2Selected}</span>
        <img :class="{ arrowActive: options.option2 }" src="{{'arrow.svg' | asset_url}}" alt="arrow svg">
      </div>
      <div
        name="{{ filter.param_name | escape }}"
        class="product-option-list"
        placeholder=""
        v-if="options.option2"
      >
        <template v-for="[key, val] of totalTags">
          <div
            class="product-option-item"
            @click="
              options.option2Selected = key;
              options.option2 = false;
            "
            v-if="val.includes('{{section.settings.filter1Name}}')"
          >
            ${key}
          </div>
        </template>
      </div>
    </div>
  </div>

  <div class="Facet">
    <span> {{ section.settings.POUR_text }} </span>
    <div class="product-option-row">
      <div
        class="product-option-label"
        @click="options.option1 = !options.option1; options.option2 = false; options.product_type = false;"
        :class="{ labelActive: options.option1 }"
      >
        <span> ${options.option1Selected}</span>
        <img :class="{ arrowActive: options.option1 }" src="{{'arrow.svg' | asset_url}}" alt="arrow svg">
      </div>
      <div
        name="{{ filter.param_name | escape }}"
        class="product-option-list"
        placeholder=""
        v-if="options.option1"
      >
        <template v-for="[key, val] of totalTags">
          <div
            class="product-option-item"
            @click="
              options.option1Selected = key;
              options.option1 = false;
            "
            v-if="val.includes('{{section.settings.filter2Name}}')"
          >
            ${key}
          </div>
        </template>
      </div>
    </div>
  </div>
  <input type="submit" @click="submit" value="search">
</div>

{% style %}
  .Facet > span {
    color: black;
    text-align: initial;
    font-family: 'chivo';
    -webkit-text-fill-color: white; /* Will override color (regardless of order) */
    -webkit-text-stroke-width: 2px;
    -webkit-text-stroke-color: red;
    font-size: 3rem;
    font-weight: 600;

    text-transform: uppercase !important;
  }

  #desktopfilterform {
    width: 60vw;
    margin: auto;
    font-size: 1.5rem;
    width: 100%;
    text-align: center;
  }

  #desktopfilterform input[type='checkbox'] {
    display: inline-block;
    width: auto;
    width: 40px;
    height: 40px;
  }
  #desktopfilterform select {
    appearance: none;
    -webkit-appearance: none;
    -moz-appearance: none;
    -ms-appearance: none;
    background: url('{{'arrow.svg' | asset_url}}');
    background-repeat: no-repeat;
    background-position: right;
    padding-right: 2rem;
  }

  #desktopfilterform select:active {
    background: url('{{'arrow-rotated.svg' | asset_url}}');
    background-repeat: no-repeat;
    background-position: right;
  }

  .Facet select,
  input#Filter-Price-LTE {
    font-size: 3rem;
    background: transparent;
    text-transform: uppercase;
    font-weight: 600;
    padding: 0.2rem 0.3rem;
    color: #d22426;
    border: 0;
    font-family: 'chivo';
    cursor: pointer;
  }

  .Facet {
    display: flex;
    align-items: center;
    justify-content: center;
    margin: 1rem 0;
  }

  .curreny-formfield {
    padding: revert;
  }

  .Facet *:focus-visible {
    outline: initial;
    outline-offset: initial;
    box-shadow: initial;
  }

  #desktopfilterform input[type='submit'] {
    margin-top: 1rem;
    padding: 1rem 4rem;
    font-size: 1.3rem;
    text-transform: uppercase;
    font-weight: 600;
    cursor: pointer;
    background: #fff;
    border: 1px solid #d22426;
    color: #d22426;
  }

  @media (max-width: 991px) {
    .Facet {
      flex-direction: column;
    }

    .Facet span {
      flex-basis: initial;
    }

    #desktopfilterform {
      font-size: 2rem;
    }

    .Facet select,
    input#Filter-Price-LTE {
      font-size: 1rem;
    }
    .Facet select,
    input#Filter-Price-LTE {
      font-size: 2rem;
    }
  }

  /** Custom Select **/
  .custom-select-wrapper {
    position: relative;
    display: inline-block;
    user-select: none;
    font-weight: 600;

    color: #d22426;

    font-family: 'chivo';
  }
  .custom-select-wrapper select {
    display: none;
  }
  .custom-select {
    position: relative;
    display: inline-block;
    text-transform: uppercase;
  }
  .custom-select-trigger {
    position: relative;
    display: block;
    padding: 0 22px;
    text-transform: uppercase;

    font-size: 3rem;
    color: #d22426;
    cursor: pointer;
  }
  .custom-select-trigger:after {
    position: absolute;
    display: block;
    width: 20px;
    height: 20px;
    right: 0;
    top: 25%;
    content: '';
    background: url(//cdn.shopify.com/s/files/1/0692/6706/3062/t/6/assets/arrow.svg?v=1955511â€¦);
    background-repeat: no-repeat;
    transition: all 0.4s ease-in-out;
  }
  .custom-select.opened .custom-select-trigger:after {
    transform: rotate(180deg);
  }
  .custom-options {
    position: absolute;
    display: block;
    top: 100%;
    left: 0;
    right: 0;
    min-width: 100%;
    margin: 15px 0;
    text-transform: uppercase;

    border-radius: 4px;
    box-sizing: border-box;

    transition: all 0.4s ease-in-out;

    opacity: 0;
    visibility: hidden;
    pointer-events: none;
    transform: translateY(-10px);
  }
  .custom-select.opened .custom-options {
    opacity: 1;
    visibility: visible;
    pointer-events: all;
    transform: translateY(0);
    z-index: 1;
    background: #ffffff3d;
    backdrop-filter: blur(9px);
  }

  .option-hover:before {
    background: #f9f9f9;
  }
  .custom-option {
    position: relative;
    display: block;
    text-transform: uppercase;

    padding: 0 22px;
    border-bottom: 1px solid #b5b5b5;
    font-size: 3rem;
    font-weight: 600;
    color: #d22426;

    line-height: 47px;
    cursor: pointer;
    transition: all 0.4s ease-in-out;
  }
  .custom-option:first-of-type {
    border-radius: 4px 4px 0 0;
  }
  .custom-option:last-of-type {
    border-bottom: 0;
    border-radius: 0 0 4px 4px;
  }
  .custom-option:hover,
  .custom-option.selection {
    background: #f9f9f9;
  }
{% endstyle %}
<script
  src="https://cdnjs.cloudflare.com/ajax/libs/vue/3.2.45/vue.global.min.js"
  integrity="sha512-Pdnl+dKWHA0jEnmhogUHlOw3FqDeujiEc3XQDkvMrPUAvytiU2cZiknw2xDPgDS+u2prg2n+6eKz3CPG588gTQ=="
  crossorigin="anonymous"
  referrerpolicy="no-referrer"
></script>
<script
  src="https://cdnjs.cloudflare.com/ajax/libs/axios/1.2.1/axios.min.js"
  integrity="sha512-zJYu9ICC+mWF3+dJ4QC34N9RA0OVS1XtPbnf6oXlvGrLGNB8egsEzu/5wgG90I61hOOKvcywoLzwNmPqGAdATA=="
  crossorigin="anonymous"
  referrerpolicy="no-referrer"
></script>
<script>
  
  
  
  
  
  
  

  const vueApp = Vue.createApp({
    // add a delimiter to replace shopify's liquid output syntax
    delimiters: ['${', '}'],
    data() {
      return {
        selected_product_type: 'Lave Linge',
        purefilters: [],
        totalTags: new Map(),
        rendererdFilters: [],
        product_type: new Set(),
        options: {
          option1: false,
          product_type_name : 'filter.p.product_type',
          option1Selected: '6 Personalize',
          option2: false,
          option2Selected: 'Family Size',
          product_type: false,
          {% comment %} filters names {% endcomment %}
          tags_filterName: 'filter.p.tag'
        },
      };
    },
    watch: {
      // whenever filter changes, this function will run
      selected_product_type(newFilter, oldFilter) {
        console.log(newFilter);
        this.totalTags.clear();

        this.rendererdFilters.map((filterItem) => {
          if (filterItem.product_type == this.selected_product_type) {
            let { tags } = filterItem;
            for (let tag of tags) {
              let extractedTag = tag.split('__');
              this.totalTags.set(extractedTag[1], extractedTag[0]);

              if (extractedTag[0] == 'Family size') {
                this.options.option2Selected = extractedTag[1];
              }
              if (extractedTag[0] == 'POUR') {
                this.options.option1Selected = extractedTag[1];
              }
            }
          }
        });
      },
    },
    // fetch products
    mounted() {
      axios
        .get('/collections/all/products.json')
        .then((response) => {
          response.data.products.forEach((element) => {
            let { tags, product_type, vendor } = element;

            this.purefilters.unshift({ tags, product_type, vendor });
            this.rendererdFilters.unshift({ tags, product_type, vendor });
          });
          this.rendererdFilters.map((filterItem) => {
            let { tags } = filterItem;
            this.product_type.add(filterItem.product_type);
            for (let tag of tags) {
              let extractedTag = tag.split('__');
              this.totalTags.set(extractedTag[1], extractedTag[0]);
            }
          });
        })
        .catch((error) => console.log(error));
    },
    methods: {
      submit() {
      
      searchparams = `?${this.options.product_type_name}=${this.selected_product_type}&${this.options.tags_filterName}={{section.settings.filter2Name}}__${this.options.option1Selected}&${this.options.tags_filterName}={{section.settings.filter1Name}}__${this.options.option2Selected}`;
      console.log(searchparams)
    let filterableparams = searchparams.replaceAll(' ', '+');
      console.log(filterableparams)

    window.location.href = `/collections/all${filterableparams}`;
      },
    },
  }).mount('#desktopfilterform');







</script>
{% schema %}
{
  "name": "Filter",
  "tag": "section",
  "class": "section",
  "settings": [
    {
      "type": "text",
      "id": "product_type_text",
      "label": "product type label text: "
    },
    {
      "type": "text",
      "id": "POUR_text",
      "label": "POUR label text: "
    },

    {
      "type": "text",
      "id": "filter1Name",
      "label": "Filter 1 name in the tags:(before the '__') "
    },
    {
      "type": "text",
      "id": "filter2Name",
      "label": "Filter 2 name in the tags:(before the '__') "
    }
  ],
  "presets": [
    {
      "name": "Filter",
      "category": "home"
    }
  ]
}
{% endschema %}
